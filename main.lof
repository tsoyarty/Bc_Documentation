\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {czech}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {czech}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\babel@toc {english}{}\relax 
\addvspace {10\p@ }
\contentsline {figure}{\numberline {1.1}{\ignorespaces Figure \ref {fig:piano} illustrates an example of a path planning problem, along with a representation of the Rapidly-exploring Random Tree (RRT) algorithm in Figure \ref {fig:RRTsimple}.\relax }}{4}{figure.1.1}%
\contentsline {figure}{\numberline {1.2}{\ignorespaces Illustration of the narrow passage where the aim is to maneuver a purple object through the limited space between black obstacles to reach the red goal configuration.\relax }}{5}{figure.1.2}%
\contentsline {figure}{\numberline {1.3}{\ignorespaces An example of an object classification problem, where the program classifies objects in the photo into their respective classes. Image courtesy of~\cite {ObjectDetection}.\relax }}{6}{figure.1.3}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces llustration of the A-satr algorithm realizes path-finding on grid map in Figure \ref {fig:Astargrid} and illustration of the narrow passage in Figure \ref {fig:narrowpassage2}, where the blue lines represent RRT* exploration in configuration space. It can be seen in Figure \ref {fig:narrowpassage2} that numerous samples were generated on the left side, resulting in incomplete coverage of the space. In summary, a large number of samples were generated in inappropriate locations.\relax }}{9}{figure.2.1}%
\contentsline {figure}{\numberline {2.2}{\ignorespaces 2D $\mathcal {C}$-space.\relax }}{10}{figure.2.2}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces Example of RRT expansion in 2D $\mathcal {C}$-space.\relax }}{11}{figure.3.1}%
\contentsline {figure}{\numberline {3.2}{\ignorespaces An illustration of a hierarchical structure, where black arrows indicate the parent-child relationships, with the origin of the arrow representing a parent node and its destination denoting a child node. Additionally, red arrows illustrate a retracing process, indicating the movement from the goal configuration back to the start configuration by moving through parent nodes.\relax }}{12}{figure.3.2}%
\contentsline {figure}{\numberline {3.3}{\ignorespaces Example of RRT* expansion in 2D $\mathcal {C}$-space.\relax }}{14}{figure.3.3}%
\contentsline {figure}{\numberline {3.4}{\ignorespaces Illustration of the \textbf {Rewiring phase}: The green circle denotes the initial configuration (\( q_{\textit {start}} \)), while the yellow circle represents the new node to be added (\( q_{\textit {new}} \)), along with its transparent yellow circular area with certain radius (\( Q_{\textit {near}} \)). Figure \ref {fig:nearest_nodes} displays the nodes within this circular area. A parent node for the new node, identified by the red circle (\( q_{\textit {min}} \)), can be seen in Figure \ref {fig:choose_parent}. Figure \ref {fig:rewiring} exemplifies the rewiring step, with numerical values indicating the lengths of respective paths from the new node to nearby nodes. Finally, Figure \ref {fig:result} shows the final appearance of the rewired tree.\relax }}{14}{figure.3.4}%
\contentsline {figure}{\numberline {3.5}{\ignorespaces Comparison in 2D $\mathcal {C}$-space without obstacles in \ref {fig:rrt2k} and \ref {fig:rrtstar2k} with obstacles in \ref {fig:rrtMaze} and \ref {fig:rrtstarMaze}. Comparison in 6D $\mathcal {C}$-space with an object represented as a tree in \ref {fig:rrt6D} and \ref {fig:rrtstar6D}.\relax }}{16}{figure.3.5}%
\contentsline {figure}{\numberline {3.6}{\ignorespaces In the 2D $\mathcal {C}$-space depicted in Figure \ref {fig:prm_maze}, obstacles are represented in black. The initial configuration ($q_{\text {start}}$) is indicated by a green circle, while the goal configuration ($q_{\text {goal}}$) is marked with a red circle. Additionally, randomly sampled valid configurations appear as blue circles \ref {fig:random_points}. The connections between these configurations can be seen in Figure \ref {fig:edges}. The path discovered between the start and goal configurations is highlighted in red \ref {fig:prm_path_planning}.\relax }}{17}{figure.3.6}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces One-dimensional example of regular \ref {fig:reg} and irregular \ref {fig:irreg} data distribution. Images courtesy of~\cite {Jaroslaw2023KDEexplain}.\relax }}{23}{figure.4.1}%
\contentsline {figure}{\numberline {4.2}{\ignorespaces An example of the 2D $\mathcal {C}$-space.\relax }}{25}{figure.4.2}%
\contentsline {figure}{\numberline {4.3}{\ignorespaces An example of density estimation with Gaussian Kernel function of the $\mathcal {C}$-space in Figure \ref {fig:GKDEmaze}. Circles represent randomly generated points in the $\mathcal {C}$-space. In Figure \ref {fig:GKDEobstacleSpace}, the density estimation of the obstacle space can be seen. Figure \ref {fig:GKDEfreeSpace} illustrates the density estimation of the free space. The higher the graph, the higher the density, indicating a higher probability for points to be in this space.\relax }}{26}{figure.4.3}%
\contentsline {figure}{\numberline {4.4}{\ignorespaces Both algorithms, RRT* \ref {fig:rrtstar_maze} and the improved RRT* using machine learning \ref {fig:rrtstarML_maze} methods, are presented, each consisting of 1000 iterations. It is evident that the improved RRT* efficiently explores the configuration space and eventually finds a path to the goal with the lowest cost of 206 u.d.(units of dimension), compared to RRT*, which finds a path to the goal with a cost of 216 u.d.. Additionally, despite both algorithms having the same number of iterations, the improved RRT* exhibits a higher number of collision-free paths found. This difference arises from the strategy of sampling points in the $\mathcal {C}$-space, which increases the probability of finding a collision-free path after each iteration.\relax }}{27}{figure.4.4}%
\contentsline {figure}{\numberline {4.5}{\ignorespaces In Figure \ref {fig:rrtstarML_learning}, the information about the $\mathcal {C}$-space can be seen. The purple color represents the \( \mathcal {X}_{\text {obs}} \) dataset, while the green color represents the \( \mathcal {X}_{\text {free}} \) dataset. Utilizing these datasets, the algorithm learns the $\mathcal {C}$-space.\relax }}{27}{figure.4.5}%
\contentsline {figure}{\numberline {4.6}{\ignorespaces In Figure \ref {fig:rrtstarML2D_learning}, it can be seen that the $\mathcal {X}_{\text {obs}}$ dataset contains more data points. This is because the purple area contains not only points inside the $\mathcal {C}_{\text {obs}}$, but also points where robot, represented as a polygon in the shape of a star, collides with obstacles.\relax }}{29}{figure.4.6}%
\contentsline {figure}{\numberline {4.7}{\ignorespaces Both algorithms, RRT* \ref {fig:rrtstar2D_maze} and the improved RRT* using machine learning \ref {fig:rrtstarML2D_maze} methods, are presented, each consisting of 1000 iterations. The improved RRT* finds a path to the goal with the lowest cost of 237.2 u.d. (units of dimension), compared to RRT*, which finds a path to the goal with a cost of 241.4 u.d..\relax }}{29}{figure.4.7}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
